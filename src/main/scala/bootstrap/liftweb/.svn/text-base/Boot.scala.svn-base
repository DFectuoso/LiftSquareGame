package bootstrap.liftweb

import _root_.net.liftweb.util._
import _root_.net.liftweb.http._
import _root_.net.liftweb.sitemap._
import _root_.net.liftweb.sitemap.Loc._
import Helpers._
import net.liftweb.mapper.{ConnectionManager,ConnectionIdentifier}
import java.sql.{Connection, DriverManager}
import _root_.net.liftweb.mapper._ 
import DB._ 

import _root_.dispatch._
import oauth.Consumer
import twitter.Auth
import oauth.Token

import net.twitknow.game.model.User
import net.twitknow.game.model.Message
import collection.immutable.{TreeMap, Map=>IMap}

class Boot {
  def boot {
    LiftRules.addToPackages("net.twitknow.OAuth")
    LiftRules.addToPackages("net.twitknow.game")

	val loggedIn = If(() => User.loggedOauthIn_?, 
	                  () => RedirectResponse("/")) 

    val entries =   Menu(Loc("Home", List("index"), "Home")) :: 
		      Menu(Loc("Game", List("game"),"Game", loggedIn)) ::
					User.sitemap
	
    LiftRules.setSiteMap(SiteMap(entries:_*))
 	DB.defineConnectionManager(DefaultConnectionIdentifier, DBVendor) 

    Schemifier.schemify(true, Log.infoF _,User, Message)
  }
}

object DBVendor extends ConnectionManager {
 def newConnection(name: ConnectionIdentifier): Box[Connection] = {
   try {
    Class.forName("com.mysql.jdbc.Driver")
    val dm = DriverManager.getConnection("jdbc:mysql://localhost/Twitknow?user=root&password=QweAsdZxc")
    
 //    Class.forName("org.apache.derby.jdbc.EmbeddedDriver")
//     val dm = DriverManager.getConnection("jdbc:derby:twitknow;create=true")
     Full(dm)
   } catch {
     case e : Exception => e.printStackTrace; Empty
   }
 }
 def releaseConnection(conn: Connection) {conn.close}
}